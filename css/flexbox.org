The *Flexbox Layout* (Flexible Box) module aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unkown and/or dynamic.

To start using the Flexbox model, you need to first define a flex container.
The flex container becomes flexible by setting the *display* property to *flex*.

# The flex container properties are:

    flex-direction
    flex-wrap
    flex-flow
    justify-content
    align-items
    align-content

When working with flexbox you need to think in terms of two axes â€” the main axis and the cross axis. 
The main axis is defined by the *flex-direction* property, and the cross axis runs perpendicular to it. Everything we do with flexbox refers back to these axes, so it is worth understanding how they work from the outset.


## The *flex-direction* Property
Has four possible values:
1) *row* - stacks the flex items horizontally (from left to right)
2) *row-reverse* - stacks the flex items horizontally (but from right to left)
3) *column* - stacks the flex items vertically (from top to bottom)
4) *column-reverse* - stacks the flex items vertically (but from bottom to top)


## The *flex-wrap* Property
Specifies whether the flex items should wrap or not.
1) *wrap* - flex items will wrap onto multiple lines, from top to bottom
2) *nowrap* - specifies that the flex items will not wrap (this is default)
3) *wrap-reverse* - flex items will wrap onto multiple lines from bottom to top


## The *flex-flow* Property
Is a shorthand property for setting both the *flex-direction* and *flex-wrap* properties: `flex-flow: row wrap;`


## The *justify-content* Property
Is used to align the flex items:
1) *flex-start* - items are packed toward the start of the flex-direction (this is default)
2) *flex-end* - items are packed toward the end of the flex-direction.
3) *center* - aligns the flex items at the center of the container
4) *space-around* - items are evenly distributed in the line with equal space around them
5) *space-between* - items are evenly distributed in the line; first item is on the start line, last item on the end line
6) *space-evenly* - items are distributed so that the spacing between any two items (and the space to the edges) is equal


## The *align-items* Property
Is used to align the flex items vertically.
1) *stretch* - stretches the flex items to fill the container (this is default)
2) *center* - items are centered in the cross-axis
3) *flex-start* - items are placed at the start of the cross axis
4) *flex-end* - items are placed at the end of the cross axis. 
5) *baseline* - aligns the flex items such as their baselines align


## The *align-content* Property
Is used to align the flex lines.
1) *stretch* - stretches the flex lines to take up the remaining space (this is default)
1) *flex-start* - items packed to the start of the container
2) *flex-end* - items packed to the end of the container
3) *center* - items centered in the container
4) *space-around* - items evenly distributed with equal space around each line
5) *space-between* - items evenly distributed; the first line is at the start of the container while the last one is at the end
6) *space-evenly* - items are evenly distributed with equal space around them


## Perfect Centering 
Set `justify-content: center;` and `align-items: center;`


# Properties for the Children (flex items)

    order
    flex-grow
    flex-shrink
    flex-basis
    flex
    align-self

## The *order* Property
Specifies the order of the flex items.

By default, flex items are laid out in the source order. However, the order property controls the order in which they appear in the flex container.
The order value must be a number, default value is 0.


## The *flex-grow* Property
This defines the ability for a flex item to grow if necessary. It accepts a unitless value that serves as a proportion. It dictates what amount of the available space inside the flex container the item should take up. Default value is 0. 

If all items have *flex-grow* set to 1, the remaining space in the container will be distributed equally to all children. If one of the children has a value of 2, the remaining space would take up twice as much space as the others (or it will try to, at least).

Negative numbers are invalid. 


## The *flex-shrink* Property
Defines the ability for a flex item to shrink if necessary. 
Specifies how much a flex item will shrink relative to the rest of the flex items.
Negative numbers are invalid. Default value is 1.


## The *flex-basis* Property
Specifies the initial length of a flex item before the remaining space is distributed.
Example: `flex-basis: 200px`


## The *flex* Property
Is a shorthand property for the *flex-grow*, *flex-shrink*, and *flex-basis* properties.

The second and third parameters (*flex-shrink* and *flex-basis*) are optional. Default is `0 1 auto`.
*It is recommended that you use this shorthand property* rather than set the individual properties. The shorthand sets the other values intelligently. 


## The *align-self* Property
Specifies the alignment for the selected item inside the flexible container. Overrides the default alignment set by the container's *align-items* property.